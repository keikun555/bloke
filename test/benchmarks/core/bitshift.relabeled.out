@pow(x.0: int, n.0: int): int {
  v1.0: int = id n.0;
  v2.0: int = const 1;
  v3.0: bool = eq v1.0 v2.0;
  br v3.0 .then.0 .else.0;
.then.0:
  v4.0: int = id x.0;
  ret v4.0;
  jmp .endif.0;
.else.0:
  v5.0: int = id x.0;
  v6.0: int = id n.0;
  v7.0: int = const 2;
  v8.0: int = div v6.0 v7.0;
  half.0: int = call @pow v5.0 v8.0;
  half.0: int = id half.0;
  v9.0: int = id half.0;
  v10.0: int = id half.0;
  v11.0: int = mul v9.0 v10.0;
  half2.0: int = id v11.0;
  v13.0: int = id n.0;
  v14.0: int = const 2;
  v15.0: int = call @mod v13.0 v14.0;
  v16.0: int = const 1;
  v17.0: bool = eq v15.0 v16.0;
  br v17.0 .then.12 .else.12;
.then.12:
  v18.0: int = id half2.0;
  v19.0: int = id x.0;
  v20.0: int = mul v18.0 v19.0;
  ans.0: int = id v20.0;
  jmp .endif.12;
.else.12:
  v21.0: int = id half2.0;
  ans.0: int = id v21.0;
.endif.12:
  v22.0: int = id ans.0;
  ret v22.0;
.endif.0:
}
@mod(a.0: int, b.0: int): int {
  v0.0: int = id a.0;
  v1.0: int = id a.0;
  v2.0: int = id b.0;
  v3.0: int = div v1.0 v2.0;
  v4.0: int = id b.0;
  v5.0: int = mul v3.0 v4.0;
  v6.0: int = sub v0.0 v5.0;
  ret v6.0;
}
@LEFTSHIFT(x.0: int, step.0: int): int {
  v0.0: int = const 2;
  v1.0: int = id step.0;
  p.0: int = call @pow v0.0 v1.0;
  p.0: int = id p.0;
  v2.0: int = id x.0;
  v3.0: int = id p.0;
  v4.0: int = mul v2.0 v3.0;
  ret v4.0;
}
@RIGHTSHIFT(x.0: int, step.0: int): int {
  v0.0: int = const 2;
  v1.0: int = id step.0;
  p.0: int = call @pow v0.0 v1.0;
  p.0: int = id p.0;
  v2.0: int = id x.0;
  v3.0: int = id p.0;
  v4.0: int = div v2.0 v3.0;
  ret v4.0;
}
@main(a.0: int, b.0: int, c.0: int, d.0: int) {
  v2.0: int = id a.0;
  v3.0: int = id b.0;
  ans1.0: int = call @LEFTSHIFT v2.0 v3.0;
  print ans1.0;
  v4.0: int = id c.0;
  v5.0: int = id d.0;
  ans2.0: int = call @RIGHTSHIFT v4.0 v5.0;
  print ans2.0;
}
