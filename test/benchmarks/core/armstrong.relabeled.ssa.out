@main(input.0.0: int) {
.main.b0:
  input.0.1: int = id input.0.0;
.main.b1:
  zero.0.0: int = const 0;
  ten.0.0: int = const 10;
  sum.0.0: int = const 0;
  digits.0.0: int = call @getDigits input.0.1;
  tmp.0.0: int = id input.0.1;
.loop:
  tmp.0.1: int = phi tmp.0.0 tmp.0.2 .main.b1 .body;
  sum.0.1: int = phi sum.0.0 sum.0.2 .main.b1 .body;
  pow.0.0: int = phi pow.0.1 .body;
  digit.0.0: int = phi digit.0.1 .body;
  b.0.0: bool = phi b.0.1 .body;
  b.0.1: bool = gt tmp.0.1 zero.0.0;
  br b.0.1 .body .done;
.body:
  digit.0.1: int = call @mod tmp.0.1 ten.0.0;
  pow.0.1: int = call @power digit.0.1 digits.0.0;
  sum.0.2: int = add sum.0.1 pow.0.1;
  tmp.0.2: int = div tmp.0.1 ten.0.0;
  jmp .loop;
.done:
  res.0.0: bool = eq input.0.1 sum.0.1;
  print res.0.0;
}
@getDigits(n.0.0: int): int {
.getDigits.b0:
  n.0.1: int = id n.0.0;
.getDigits.b1:
  ten.0.0: int = const 10;
  zero.0.0: int = const 0;
  one.0.0: int = const 1;
  div.0.0: int = div n.0.1 ten.0.0;
  cond.0.0: bool = eq div.0.0 zero.0.0;
  br cond.0.0 .then .else;
.then:
  ret one.0.0;
.else:
  rec.0.0: int = call @getDigits div.0.0;
  res.0.0: int = add rec.0.0 one.0.0;
  ret res.0.0;
}
@mod(a.0.0: int, b.0.0: int): int {
.mod.b0:
  a.0.1: int = id a.0.0;
  b.0.1: int = id b.0.0;
.mod.b1:
  q.0.0: int = div a.0.1 b.0.1;
  aq.0.0: int = mul b.0.1 q.0.0;
  mod.0.0: int = sub a.0.1 aq.0.0;
  ret mod.0.0;
}
@power(base.0.0: int, exp.0.0: int): int {
.power.b0:
  base.0.1: int = id base.0.0;
  exp.0.1: int = id exp.0.0;
.power.b1:
  ten.0.0: int = const 10;
  zero.0.0: int = const 0;
  one.0.0: int = const 1;
  res.0.0: int = const 1;
.loop:
  res.0.1: int = phi res.0.0 res.0.2 .power.b1 .body;
  exp.0.2: int = phi exp.0.1 exp.0.3 .power.b1 .body;
  b.0.0: bool = phi b.0.1 .body;
  b.0.1: bool = eq exp.0.2 zero.0.0;
  br b.0.1 .done .body;
.body:
  res.0.2: int = mul res.0.1 base.0.1;
  exp.0.3: int = sub exp.0.2 one.0.0;
  jmp .loop;
.done:
  ret res.0.1;
}
