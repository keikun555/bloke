@main(in: int) {
  ten.0: int = const 10;
  zero.0: int = const 0;
  one.0: int = const 1;
  index.0: int = const 1;
  not_finished.0: bool = const true;
.for.cond:
  br not_finished.0 .for.body .for.end;
.for.body:
  power.0: int = call @pow ten.0 index.0;
  d.0: int = div in.0 power.0;
  check.0: bool = eq d.0 zero.0;
  br check.0 .if.true .if.false;
.if.true:
  not_finished.0: bool = const false;
  jmp .for.cond;
.if.false:
  index.0: int = add index.0 one.0;
  jmp .for.cond;
.for.end:
  exp.0: int = sub index.0 one.0;
  is_palindrome.0: bool = call @palindrome in.0 exp.0;
  print is_palindrome.0;
}
@pow(base: int, exp: int): int {
  res.0: int = const 1;
  zero.0: int = const 0;
  one.0: int = const 1;
  not_finished.0: bool = const true;
.for.cond.pow:
  br not_finished.0 .for.body.pow .for.end.pow;
.for.body.pow:
  finished.0: bool = eq exp.0 zero.0;
  br finished.0 .if.true.pow .if.false.pow;
.if.true.pow:
  not_finished.0: bool = const false;
  jmp .for.cond.pow;
.if.false.pow:
  res.0: int = mul res.0 base.0;
  exp.0: int = sub exp.0 one.0;
  jmp .for.cond.pow;
.for.end.pow:
  ret res.0;
}
@palindrome(in: int, len: int): bool {
  is_palindrome.0: bool = const false;
  zero.0: int = const 0;
  two.0: int = const 2;
  ten.0: int = const 10;
  check.0: bool = le len.0 zero.0;
  br check.0 .if.true.palindrome .if.false.palindrome;
.if.true.palindrome:
  is_palindrome.0: bool = const true;
  jmp .if.end.palindrome;
.if.false.palindrome:
  power.0: int = call @pow ten.0 len.0;
  left.0: int = div in.0 power.0;
  v1.0: int = div in.0 ten.0;
  v2.0: int = mul v1.0 ten.0;
  right.0: int = sub in.0 v2.0;
  is_equal.0: bool = eq left.0 right.0;
  br is_equal.0 .if.true.mirror .if.false.mirror;
.if.true.mirror:
  temp.0: int = mul power.0 left.0;
  temp.0: int = sub in.0 temp.0;
  temp.0: int = sub temp.0 right.0;
  next_in.0: int = div temp.0 ten.0;
  next_len.0: int = sub len.0 two.0;
  is_palindrome.0: bool = call @palindrome next_in.0 next_len.0;
  jmp .if.end.palindrome;
.if.false.mirror:
  is_palindrome.0: bool = const false;
  jmp .if.end.palindrome;
.if.end.palindrome:
  ret is_palindrome.0;
}
