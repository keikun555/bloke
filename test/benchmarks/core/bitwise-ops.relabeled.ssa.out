@mod2(a.0.0: int): bool {
.mod2.b0:
  a.0.1: int = id a.0.0;
.mod2.b1:
  two.0.0: int = const 2;
  tmp.0.0: int = div a.0.1 two.0.0;
  tmp2.0.0: int = mul tmp.0.0 two.0.0;
  tmp3.0.0: int = sub a.0.1 tmp2.0.0;
  one.0.0: int = const 1;
  ans.0.0: bool = eq one.0.0 tmp3.0.0;
  ret ans.0.0;
}
@loop_subroutine(a.0.0: int, b.0.0: int, c.0.0: bool): int {
.loop_subroutine.b0:
  a.0.1: int = id a.0.0;
  b.0.1: int = id b.0.0;
  c.0.1: bool = id c.0.0;
.loop_subroutine.b1:
  i.0.0: int = const 0;
  n.0.0: int = const 63;
  one.0.0: int = const 1;
  two.0.0: int = const 2;
  ans.0.0: int = const 0;
  to_add.0.0: int = const 1;
.loop:
  to_add.0.1: int = phi to_add.0.0 to_add.0.2 .loop_subroutine.b1 .end_loop;
  mod2b.0.0: bool = phi mod2b.0.1 .end_loop;
  mod2a.0.0: bool = phi mod2a.0.1 .end_loop;
  i.0.1: int = phi i.0.0 i.0.2 .loop_subroutine.b1 .end_loop;
  cond_add.0.0: bool = phi cond_add.0.3 .end_loop;
  cond.0.0: bool = phi cond.0.1 .end_loop;
  b.0.2: int = phi b.0.1 b.0.3 .loop_subroutine.b1 .end_loop;
  ans.0.1: int = phi ans.0.0 ans.0.3 .loop_subroutine.b1 .end_loop;
  a.0.2: int = phi a.0.1 a.0.3 .loop_subroutine.b1 .end_loop;
  cond.0.1: bool = le i.0.1 n.0.0;
  br cond.0.1 .here .end;
.here:
  mod2a.0.1: bool = call @mod2 a.0.2;
  mod2b.0.1: bool = call @mod2 b.0.2;
  cond_add.0.1: bool = and mod2a.0.1 mod2b.0.1;
  br c.0.1 .doOr .stay;
.doOr:
  cond_add.0.2: bool = or mod2a.0.1 mod2b.0.1;
.stay:
  cond_add.0.3: bool = phi cond_add.0.1 cond_add.0.2 .here .doOr;
  br cond_add.0.3 .add .end_loop;
.add:
  ans.0.2: int = add ans.0.1 to_add.0.1;
.end_loop:
  ans.0.3: int = phi ans.0.1 ans.0.2 .stay .add;
  a.0.3: int = div a.0.2 two.0.0;
  b.0.3: int = div b.0.2 two.0.0;
  to_add.0.2: int = mul to_add.0.1 two.0.0;
  i.0.2: int = add i.0.1 one.0.0;
  jmp .loop;
.end:
  ret ans.0.1;
}
@OR(a.0.0: int, b.0.0: int): int {
.OR.b0:
  a.0.1: int = id a.0.0;
  b.0.1: int = id b.0.0;
.OR.b1:
  oper.0.0: bool = const true;
  v1.0.0: int = call @loop_subroutine a.0.1 b.0.1 oper.0.0;
  ret v1.0.0;
}
@AND(a.0.0: int, b.0.0: int): int {
.AND.b0:
  a.0.1: int = id a.0.0;
  b.0.1: int = id b.0.0;
.AND.b1:
  oper.0.0: bool = const false;
  v1.0.0: int = call @loop_subroutine a.0.1 b.0.1 oper.0.0;
  ret v1.0.0;
}
@XOR(a.0.0: int, b.0.0: int): int {
.XOR.b0:
  a.0.1: int = id a.0.0;
  b.0.1: int = id b.0.0;
.XOR.b1:
  and_val.0.0: int = call @AND a.0.1 b.0.1;
  or_val.0.0: int = call @OR a.0.1 b.0.1;
  ans.0.0: int = sub or_val.0.0 and_val.0.0;
  ret ans.0.0;
}
@main(a.0.0: int, b.0.0: int, c.0.0: int) {
.main.b0:
  a.0.1: int = id a.0.0;
  b.0.1: int = id b.0.0;
  c.0.1: int = id c.0.0;
.main.b1:
  one.0.0: int = const 1;
  zero.0.0: int = const 0;
  sel.0.0: int = sub c.0.1 one.0.0;
  ans.0.0: int = id zero.0.0;
  less.0.0: bool = lt sel.0.0 zero.0.0;
  equal.0.0: bool = eq sel.0.0 zero.0.0;
  greater.0.0: bool = gt sel.0.0 zero.0.0;
  br less.0.0 .and_op .useless_lbl;
.useless_lbl:
  br equal.0.0 .or_op .xor_op;
.and_op:
  ans.0.3: int = call @AND a.0.1 b.0.1;
  jmp .end;
.or_op:
  ans.0.1: int = call @OR a.0.1 b.0.1;
  jmp .end;
.xor_op:
  ans.0.2: int = call @XOR a.0.1 b.0.1;
.end:
  ans.0.4: int = phi ans.0.1 ans.0.2 ans.0.3 .or_op .xor_op .and_op;
  print ans.0.4;
}
