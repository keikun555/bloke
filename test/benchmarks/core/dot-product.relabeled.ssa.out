@dot_product(vectorA.0.0: ptr<int>, vectorB.0.0: ptr<int>, size.0.0: int): int {
.dot_product.b0:
  vectorA.0.1: ptr<int> = id vectorA.0.0;
  vectorB.0.1: ptr<int> = id vectorB.0.0;
  size.0.1: int = id size.0.0;
.dot_product.b1:
  one.0.0: int = const 1;
  index.0.0: int = const 0;
  answer.0.0: int = const 0;
.loop:
  valB.0.0: int = phi valB.0.1 .loop;
  valA.0.0: int = phi valA.0.1 .loop;
  tmp.0.0: int = phi tmp.0.1 .loop;
  ptrB.0.0: ptr<int> = phi ptrB.0.1 .loop;
  ptrA.0.0: ptr<int> = phi ptrA.0.1 .loop;
  index.0.1: int = phi index.0.0 index.0.2 .dot_product.b1 .loop;
  cond.0.0: bool = phi cond.0.1 .loop;
  answer.0.1: int = phi answer.0.0 answer.0.2 .dot_product.b1 .loop;
  ptrA.0.1: ptr<int> = ptradd vectorA.0.1 index.0.1;
  ptrB.0.1: ptr<int> = ptradd vectorB.0.1 index.0.1;
  valA.0.1: int = load ptrA.0.1;
  valB.0.1: int = load ptrB.0.1;
  tmp.0.1: int = mul valA.0.1 valB.0.1;
  answer.0.2: int = add answer.0.1 tmp.0.1;
  index.0.2: int = add index.0.1 one.0.0;
  cond.0.1: bool = lt index.0.2 size.0.1;
  br cond.0.1 .loop .done;
.done:
  ret answer.0.2;
}
@main {
.main.b0:
  a.0.0: int = const 25;
  b.0.0: int = const 50;
  c.0.0: int = const 100;
  d.0.0: int = const 150;
  e.0.0: int = const 250;
  f.0.0: int = const 2;
  g.0.0: int = const 10;
  h.0.0: int = const 20;
  i.0.0: int = const 30;
  j.0.0: int = const 40;
  one.0.0: int = const 1;
  zero.0.0: int = const 0;
  size.0.0: int = const 5;
  vectorA.0.0: ptr<int> = alloc size.0.0;
  indexPtr.0.0: ptr<int> = ptradd vectorA.0.0 zero.0.0;
  store indexPtr.0.0 a.0.0;
  indexPtr.0.1: ptr<int> = ptradd indexPtr.0.0 one.0.0;
  store indexPtr.0.1 b.0.0;
  indexPtr.0.2: ptr<int> = ptradd indexPtr.0.1 one.0.0;
  store indexPtr.0.2 c.0.0;
  indexPtr.0.3: ptr<int> = ptradd indexPtr.0.2 one.0.0;
  store indexPtr.0.3 d.0.0;
  indexPtr.0.4: ptr<int> = ptradd indexPtr.0.3 one.0.0;
  store indexPtr.0.4 e.0.0;
  vectorB.0.0: ptr<int> = alloc size.0.0;
  indexPtr.0.5: ptr<int> = ptradd vectorB.0.0 zero.0.0;
  store indexPtr.0.5 f.0.0;
  indexPtr.0.6: ptr<int> = ptradd indexPtr.0.5 one.0.0;
  store indexPtr.0.6 g.0.0;
  indexPtr.0.7: ptr<int> = ptradd indexPtr.0.6 one.0.0;
  store indexPtr.0.7 h.0.0;
  indexPtr.0.8: ptr<int> = ptradd indexPtr.0.7 one.0.0;
  store indexPtr.0.8 i.0.0;
  indexPtr.0.9: ptr<int> = ptradd indexPtr.0.8 one.0.0;
  store indexPtr.0.9 j.0.0;
  val.0.0: int = call @dot_product vectorA.0.0 vectorB.0.0 size.0.0;
  print val.0.0;
  free vectorA.0.0;
  free vectorB.0.0;
}
