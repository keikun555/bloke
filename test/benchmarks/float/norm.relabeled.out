@pow(x: float, k: int): float {
  xx.0: float = const 1.0;
  one.0: int = const 1;
  i.0: int = const 0;
.while:
  b.0: bool = lt i.0 k.0;
  br b.0 .continue .endwhile;
.continue:
  xx.0: float = fmul xx.0 x.0;
  i.0: int = add i.0 one.0;
  jmp .while;
.endwhile:
  ret xx.0;
}
@n_root(x: float, n: int): float {
  one.0: int = const 1;
  two_f.0: float = const 2.0;
  xxx.0: float = fdiv x.0 two_f.0;
  n_minus_one.0: int = sub n.0 one.0;
  i.0: int = const 0;
  num_iter.0: int = const 20;
.while:
  b.0: bool = lt i.0 num_iter.0;
  br b.0 .continue .endwhile;
.continue:
  pow_n_minus_one.0: float = call @pow xxx.0 n_minus_one.0;
  pow_n.0: float = fmul pow_n_minus_one.0 xxx.0;
  numerator.0: float = fsub pow_n.0 x.0;
  denominator.0: float = fmul x.0 pow_n_minus_one.0;
  frac.0: float = fdiv numerator.0 denominator.0;
  xxx.0: float = fsub xxx.0 frac.0;
  i.0: int = add i.0 one.0;
  jmp .while;
.endwhile:
  ret xxx.0;
}
@pack(size: int, n1: float, n2: float, n3: float, n4: float, n5: float): ptr<float> {
  one.0: int = const 1;
  i.0: int = const 0;
  array.0: ptr<float> = alloc size.0;
  loc.0: ptr<float> = ptradd array.0 i.0;
  store loc.0 n1.0;
  i.0: int = add i.0 one.0;
  loc.0: ptr<float> = ptradd array.0 i.0;
  store loc.0 n2.0;
  i.0: int = add i.0 one.0;
  loc.0: ptr<float> = ptradd array.0 i.0;
  store loc.0 n3.0;
  i.0: int = add i.0 one.0;
  loc.0: ptr<float> = ptradd array.0 i.0;
  store loc.0 n4.0;
  i.0: int = add i.0 one.0;
  loc.0: ptr<float> = ptradd array.0 i.0;
  store loc.0 n5.0;
  ret array.0;
}
@print_array(array: ptr<float>, size: int) {
  i.0: int = const 0;
  one.0: int = const 1;
.loop:
  cond.0: bool = lt i.0 size.0;
  br cond.0 .body .done;
.body:
  loc.0: ptr<float> = ptradd array.0 i.0;
  val.0: float = load loc.0;
  print val.0;
.loop_end:
  i.0: int = add i.0 one.0;
  jmp .loop;
.done:
  ret;
}
@euclidean_norm(array: ptr<float>, size: int): float {
  i.0: int = const 0;
  sum.0: float = const 0.0;
  one.0: int = const 1;
.loop:
  cond.0: bool = lt i.0 size.0;
  br cond.0 .body .done;
.body:
  loc.0: ptr<float> = ptradd array.0 i.0;
  val.0: float = load loc.0;
  square.0: float = fmul val.0 val.0;
  sum.0: float = fadd sum.0 square.0;
.loop_end:
  i.0: int = add i.0 one.0;
  jmp .loop;
.done:
  two.0: int = const 2;
  norm.0: float = call @n_root sum.0 two.0;
  ret norm.0;
}
@main {
  size.0: int = const 5;
  n1.0: float = const 3;
  n2.0: float = const 10;
  n3.0: float = const 1;
  n4.0: float = const 9;
  n5.0: float = const 7;
  array.0: ptr<float> = call @pack size.0 n1.0 n2.0 n3.0 n4.0 n5.0;
  norm.0: float = call @euclidean_norm array.0 size.0;
  print norm.0;
  free array.0;
}
