@main {
.main.b0:
  a.0.0: float = const 2.0;
  b.0.0: float = const 10.0;
  n.0.0: float = const 8.0;
  left.0.0: float = call @left_riemann a.0.0 b.0.0 n.0.0;
  print left.0.0;
  midpoint.0.0: float = call @midpoint_riemann a.0.0 b.0.0 n.0.0;
  print midpoint.0.0;
  right.0.0: float = call @right_riemann a.0.0 b.0.0 n.0.0;
  print right.0.0;
}
@square_function(x.0.0: float): float {
.square_function.b0:
  x.0.1: float = id x.0.0;
.square_function.b1:
  square.0.0: float = fmul x.0.1 x.0.1;
  ret square.0.0;
}
@left_riemann(a.0.0: float, b.0.0: float, n.0.0: float): float {
.left_riemann.b0:
  a.0.1: float = id a.0.0;
  b.0.1: float = id b.0.0;
  n.0.1: float = id n.0.0;
.left_riemann.b1:
  zero.0.0: float = const 0.0;
  one.0.0: float = const 1.0;
  negative_one.0.0: float = fsub zero.0.0 one.0.0;
  diff.0.0: float = fsub b.0.1 a.0.1;
  delta.0.0: float = fdiv diff.0.0 n.0.1;
  i.0.0: float = fsub n.0.1 one.0.0;
  sum.0.0: float = const 0.0;
.while.header:
  x.0.0: float = phi x.0.1 .while.body;
  sum.0.1: float = phi sum.0.0 sum.0.2 .left_riemann.b1 .while.body;
  offset.0.0: float = phi offset.0.1 .while.body;
  i.0.1: float = phi i.0.0 i.0.2 .left_riemann.b1 .while.body;
  f_x.0.0: float = phi f_x.0.1 .while.body;
  cond.0.0: bool = phi cond.0.1 .while.body;
  cond.0.1: bool = feq i.0.1 negative_one.0.0;
  br cond.0.1 .while.end .while.body;
.while.body:
  offset.0.1: float = fmul delta.0.0 i.0.1;
  x.0.1: float = fadd a.0.1 offset.0.1;
  f_x.0.1: float = call @square_function x.0.1;
  sum.0.2: float = fadd sum.0.1 f_x.0.1;
  i.0.2: float = fsub i.0.1 one.0.0;
  jmp .while.header;
.while.end:
  sum.0.3: float = fmul sum.0.1 delta.0.0;
  ret sum.0.3;
}
@right_riemann(a.0.0: float, b.0.0: float, n.0.0: float): float {
.right_riemann.b0:
  a.0.1: float = id a.0.0;
  b.0.1: float = id b.0.0;
  n.0.1: float = id n.0.0;
.right_riemann.b1:
  zero.0.0: float = const 0.0;
  one.0.0: float = const 1.0;
  diff.0.0: float = fsub b.0.1 a.0.1;
  delta.0.0: float = fdiv diff.0.0 n.0.1;
  i.0.0: float = id n.0.1;
  sum.0.0: float = const 0.0;
.while.header:
  x.0.0: float = phi x.0.1 .while.body;
  sum.0.1: float = phi sum.0.0 sum.0.2 .right_riemann.b1 .while.body;
  offset.0.0: float = phi offset.0.1 .while.body;
  i.0.1: float = phi i.0.0 i.0.2 .right_riemann.b1 .while.body;
  f_x.0.0: float = phi f_x.0.1 .while.body;
  cond.0.0: bool = phi cond.0.1 .while.body;
  cond.0.1: bool = feq i.0.1 zero.0.0;
  br cond.0.1 .while.end .while.body;
.while.body:
  offset.0.1: float = fmul delta.0.0 i.0.1;
  x.0.1: float = fadd a.0.1 offset.0.1;
  f_x.0.1: float = call @square_function x.0.1;
  sum.0.2: float = fadd sum.0.1 f_x.0.1;
  i.0.2: float = fsub i.0.1 one.0.0;
  jmp .while.header;
.while.end:
  sum.0.3: float = fmul sum.0.1 delta.0.0;
  ret sum.0.3;
}
@midpoint_riemann(a.0.0: float, b.0.0: float, n.0.0: float): float {
.midpoint_riemann.b0:
  a.0.1: float = id a.0.0;
  b.0.1: float = id b.0.0;
  n.0.1: float = id n.0.0;
.midpoint_riemann.b1:
  zero.0.0: float = const 0.0;
  one.0.0: float = const 1.0;
  negative_one.0.0: float = fsub zero.0.0 one.0.0;
  two.0.0: float = const 2.0;
  diff.0.0: float = fsub b.0.1 a.0.1;
  delta.0.0: float = fdiv diff.0.0 n.0.1;
  i.0.0: float = fsub n.0.1 one.0.0;
  sum.0.0: float = const 0.0;
.while.header:
  x.0.0: float = phi x.0.1 .while.body;
  sum.0.1: float = phi sum.0.0 sum.0.2 .midpoint_riemann.b1 .while.body;
  offset.0.0: float = phi offset.0.2 .while.body;
  i.0.1: float = phi i.0.0 i.0.2 .midpoint_riemann.b1 .while.body;
  half_delta.0.0: float = phi half_delta.0.1 .while.body;
  f_x.0.0: float = phi f_x.0.1 .while.body;
  cond.0.0: bool = phi cond.0.1 .while.body;
  cond.0.1: bool = feq i.0.1 negative_one.0.0;
  br cond.0.1 .while.end .while.body;
.while.body:
  offset.0.1: float = fmul delta.0.0 i.0.1;
  half_delta.0.1: float = fdiv delta.0.0 two.0.0;
  offset.0.2: float = fadd offset.0.1 half_delta.0.1;
  x.0.1: float = fadd a.0.1 offset.0.2;
  f_x.0.1: float = call @square_function x.0.1;
  sum.0.2: float = fadd sum.0.1 f_x.0.1;
  i.0.2: float = fsub i.0.1 one.0.0;
  jmp .while.header;
.while.end:
  sum.0.3: float = fmul sum.0.1 delta.0.0;
  ret sum.0.3;
}
