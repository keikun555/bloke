@pow(x.0.0: float, k.0.0: int): float {
.pow.b0:
  x.0.1: float = id x.0.0;
  k.0.1: int = id k.0.0;
.pow.b1:
  xx.0.0: float = const 1.0;
  one.0.0: int = const 1;
  i.0.0: int = const 0;
.while:
  xx.0.1: float = phi xx.0.0 xx.0.2 .pow.b1 .continue;
  i.0.1: int = phi i.0.0 i.0.2 .pow.b1 .continue;
  b.0.0: bool = phi b.0.1 .continue;
  b.0.1: bool = lt i.0.1 k.0.1;
  br b.0.1 .continue .endwhile;
.continue:
  xx.0.2: float = fmul xx.0.1 x.0.1;
  i.0.2: int = add i.0.1 one.0.0;
  jmp .while;
.endwhile:
  ret xx.0.1;
}
@n_root(x.0.0: float, n.0.0: int): float {
.n_root.b0:
  x.0.1: float = id x.0.0;
  n.0.1: int = id n.0.0;
.n_root.b1:
  one.0.0: int = const 1;
  two_f.0.0: float = const 2.0;
  xxx.0.0: float = fdiv x.0.1 two_f.0.0;
  n_minus_one.0.0: int = sub n.0.1 one.0.0;
  i.0.0: int = const 0;
  num_iter.0.0: int = const 20;
.while:
  xxx.0.1: float = phi xxx.0.0 xxx.0.2 .n_root.b1 .continue;
  pow_n_minus_one.0.0: float = phi pow_n_minus_one.0.1 .continue;
  pow_n.0.0: float = phi pow_n.0.1 .continue;
  numerator.0.0: float = phi numerator.0.1 .continue;
  i.0.1: int = phi i.0.0 i.0.2 .n_root.b1 .continue;
  frac.0.0: float = phi frac.0.1 .continue;
  denominator.0.0: float = phi denominator.0.1 .continue;
  b.0.0: bool = phi b.0.1 .continue;
  b.0.1: bool = lt i.0.1 num_iter.0.0;
  br b.0.1 .continue .endwhile;
.continue:
  pow_n_minus_one.0.1: float = call @pow xxx.0.1 n_minus_one.0.0;
  pow_n.0.1: float = fmul pow_n_minus_one.0.1 xxx.0.1;
  numerator.0.1: float = fsub pow_n.0.1 x.0.1;
  denominator.0.1: float = fmul x.0.1 pow_n_minus_one.0.1;
  frac.0.1: float = fdiv numerator.0.1 denominator.0.1;
  xxx.0.2: float = fsub xxx.0.1 frac.0.1;
  i.0.2: int = add i.0.1 one.0.0;
  jmp .while;
.endwhile:
  ret xxx.0.1;
}
@pack(size.0.0: int, n1.0.0: float, n2.0.0: float, n3.0.0: float, n4.0.0: float, n5.0.0: float): ptr<float> {
.pack.b0:
  size.0.1: int = id size.0.0;
  n1.0.1: float = id n1.0.0;
  n2.0.1: float = id n2.0.0;
  n3.0.1: float = id n3.0.0;
  n4.0.1: float = id n4.0.0;
  n5.0.1: float = id n5.0.0;
.pack.b1:
  one.0.0: int = const 1;
  i.0.0: int = const 0;
  array.0.0: ptr<float> = alloc size.0.1;
  loc.0.0: ptr<float> = ptradd array.0.0 i.0.0;
  store loc.0.0 n1.0.1;
  i.0.1: int = add i.0.0 one.0.0;
  loc.0.1: ptr<float> = ptradd array.0.0 i.0.1;
  store loc.0.1 n2.0.1;
  i.0.2: int = add i.0.1 one.0.0;
  loc.0.2: ptr<float> = ptradd array.0.0 i.0.2;
  store loc.0.2 n3.0.1;
  i.0.3: int = add i.0.2 one.0.0;
  loc.0.3: ptr<float> = ptradd array.0.0 i.0.3;
  store loc.0.3 n4.0.1;
  i.0.4: int = add i.0.3 one.0.0;
  loc.0.4: ptr<float> = ptradd array.0.0 i.0.4;
  store loc.0.4 n5.0.1;
  ret array.0.0;
}
@print_array(array.0.0: ptr<float>, size.0.0: int) {
.print_array.b0:
  array.0.1: ptr<float> = id array.0.0;
  size.0.1: int = id size.0.0;
.print_array.b1:
  i.0.0: int = const 0;
  one.0.0: int = const 1;
.loop:
  val.0.0: float = phi val.0.1 .loop_end;
  loc.0.0: ptr<float> = phi loc.0.1 .loop_end;
  i.0.1: int = phi i.0.0 i.0.2 .print_array.b1 .loop_end;
  cond.0.0: bool = phi cond.0.1 .loop_end;
  cond.0.1: bool = lt i.0.1 size.0.1;
  br cond.0.1 .body .done;
.body:
  loc.0.1: ptr<float> = ptradd array.0.1 i.0.1;
  val.0.1: float = load loc.0.1;
  print val.0.1;
.loop_end:
  i.0.2: int = add i.0.1 one.0.0;
  jmp .loop;
.done:
  ret;
}
@euclidean_norm(array.0.0: ptr<float>, size.0.0: int): float {
.euclidean_norm.b0:
  array.0.1: ptr<float> = id array.0.0;
  size.0.1: int = id size.0.0;
.euclidean_norm.b1:
  i.0.0: int = const 0;
  sum.0.0: float = const 0.0;
  one.0.0: int = const 1;
.loop:
  val.0.0: float = phi val.0.1 .loop_end;
  sum.0.1: float = phi sum.0.0 sum.0.2 .euclidean_norm.b1 .loop_end;
  square.0.0: float = phi square.0.1 .loop_end;
  loc.0.0: ptr<float> = phi loc.0.1 .loop_end;
  i.0.1: int = phi i.0.0 i.0.2 .euclidean_norm.b1 .loop_end;
  cond.0.0: bool = phi cond.0.1 .loop_end;
  cond.0.1: bool = lt i.0.1 size.0.1;
  br cond.0.1 .body .done;
.body:
  loc.0.1: ptr<float> = ptradd array.0.1 i.0.1;
  val.0.1: float = load loc.0.1;
  square.0.1: float = fmul val.0.1 val.0.1;
  sum.0.2: float = fadd sum.0.1 square.0.1;
.loop_end:
  i.0.2: int = add i.0.1 one.0.0;
  jmp .loop;
.done:
  two.0.0: int = const 2;
  norm.0.0: float = call @n_root sum.0.1 two.0.0;
  ret norm.0.0;
}
@main {
.main.b0:
  size.0.0: int = const 5;
  n1.0.0: float = const 3;
  n2.0.0: float = const 10;
  n3.0.0: float = const 1;
  n4.0.0: float = const 9;
  n5.0.0: float = const 7;
  array.0.0: ptr<float> = call @pack size.0.0 n1.0.0 n2.0.0 n3.0.0 n4.0.0 n5.0.0;
  norm.0.0: float = call @euclidean_norm array.0.0 size.0.0;
  print norm.0.0;
  free array.0.0;
}
