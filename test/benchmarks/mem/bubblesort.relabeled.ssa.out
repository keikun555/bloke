@pack(size.0.0: int, n1.0.0: int, n2.0.0: int, n3.0.0: int, n4.0.0: int, n5.0.0: int): ptr<int> {
.pack.b0:
  size.0.1: int = id size.0.0;
  n1.0.1: int = id n1.0.0;
  n2.0.1: int = id n2.0.0;
  n3.0.1: int = id n3.0.0;
  n4.0.1: int = id n4.0.0;
  n5.0.1: int = id n5.0.0;
.pack.b1:
  one.0.0: int = const 1;
  i.0.0: int = const 0;
  array.0.0: ptr<int> = alloc size.0.1;
  loc.0.0: ptr<int> = ptradd array.0.0 i.0.0;
  store loc.0.0 n1.0.1;
  i.0.1: int = add i.0.0 one.0.0;
  loc.0.1: ptr<int> = ptradd array.0.0 i.0.1;
  store loc.0.1 n2.0.1;
  i.0.2: int = add i.0.1 one.0.0;
  loc.0.2: ptr<int> = ptradd array.0.0 i.0.2;
  store loc.0.2 n3.0.1;
  i.0.3: int = add i.0.2 one.0.0;
  loc.0.3: ptr<int> = ptradd array.0.0 i.0.3;
  store loc.0.3 n4.0.1;
  i.0.4: int = add i.0.3 one.0.0;
  loc.0.4: ptr<int> = ptradd array.0.0 i.0.4;
  store loc.0.4 n5.0.1;
  ret array.0.0;
}
@print_array(array.0.0: ptr<int>, size.0.0: int) {
.print_array.b0:
  array.0.1: ptr<int> = id array.0.0;
  size.0.1: int = id size.0.0;
.print_array.b1:
  i.0.0: int = const 0;
  one.0.0: int = const 1;
.loop:
  val.0.0: int = phi val.0.1 .loop_end;
  loc.0.0: ptr<int> = phi loc.0.1 .loop_end;
  i.0.1: int = phi i.0.0 i.0.2 .print_array.b1 .loop_end;
  cond.0.0: bool = phi cond.0.1 .loop_end;
  cond.0.1: bool = lt i.0.1 size.0.1;
  br cond.0.1 .body .done;
.body:
  loc.0.1: ptr<int> = ptradd array.0.1 i.0.1;
  val.0.1: int = load loc.0.1;
  print val.0.1;
.loop_end:
  i.0.2: int = add i.0.1 one.0.0;
  jmp .loop;
.done:
  ret;
}
@swap_cond(array.0.0: ptr<int>, j.0.0: int) {
.swap_cond.b0:
  array.0.1: ptr<int> = id array.0.0;
  j.0.1: int = id j.0.0;
.swap_cond.b1:
  one.0.0: int = const 1;
  j_add_1.0.0: int = add j.0.1 one.0.0;
  loc.0.0: ptr<int> = ptradd array.0.1 j.0.1;
  loc_next.0.0: ptr<int> = ptradd array.0.1 j_add_1.0.0;
  elem_a.0.0: int = load loc.0.0;
  elem_b.0.0: int = load loc_next.0.0;
  cond.0.0: bool = gt elem_a.0.0 elem_b.0.0;
  br cond.0.0 .swap .done;
.swap:
  store loc.0.0 elem_b.0.0;
  store loc_next.0.0 elem_a.0.0;
.done:
  ret;
}
@main(size.0.0: int, n1.0.0: int, n2.0.0: int, n3.0.0: int, n4.0.0: int, n5.0.0: int) {
.main.b0:
  size.0.1: int = id size.0.0;
  n1.0.1: int = id n1.0.0;
  n2.0.1: int = id n2.0.0;
  n3.0.1: int = id n3.0.0;
  n4.0.1: int = id n4.0.0;
  n5.0.1: int = id n5.0.0;
.main.b1:
  array.0.0: ptr<int> = call @pack size.0.1 n1.0.1 n2.0.1 n3.0.1 n4.0.1 n5.0.1;
  one.0.0: int = const 1;
  i.0.0: int = const 0;
  j.0.0: int = const 0;
  sizei.0.0: int = sub size.0.1 one.0.0;
.loopi:
  sizej.0.0: int = phi sizej.0.2 .loopi_end;
  j.0.1: int = phi j.0.0 j.0.4 .main.b1 .loopi_end;
  i.0.1: int = phi i.0.0 i.0.2 .main.b1 .loopi_end;
  condj.0.0: bool = phi condj.0.2 .loopi_end;
  condi.0.0: bool = phi condi.0.1 .loopi_end;
  condi.0.1: bool = lt i.0.1 sizei.0.0;
  br condi.0.1 .bodyi .donei;
.bodyi:
  sizej.0.1: int = sub size.0.1 i.0.1;
  sizej.0.2: int = sub sizej.0.1 one.0.0;
.loopj:
  j.0.2: int = phi j.0.1 j.0.3 .bodyi .loop_endj;
  condj.0.1: bool = phi condj.0.0 condj.0.2 .bodyi .loop_endj;
  condj.0.2: bool = lt j.0.2 sizej.0.2;
  br condj.0.2 .bodyj .donej;
.bodyj:
  call @swap_cond array.0.0 j.0.2;
.loop_endj:
  j.0.3: int = add j.0.2 one.0.0;
  jmp .loopj;
.donej:
  j.0.4: int = const 0;
.loopi_end:
  i.0.2: int = add i.0.1 one.0.0;
  jmp .loopi;
.donei:
  call @print_array array.0.0 size.0.1;
  free array.0.0;
}
