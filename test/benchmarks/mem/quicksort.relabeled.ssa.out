@main(n1.0: int, n2.0: int, n3.0: int, n4.0: int, n5.0: int, n6.0: int) {
.main.b0:
  n1.1: int = id n1.0;
  n2.1: int = id n2.0;
  n3.1: int = id n3.0;
  n4.1: int = id n4.0;
  n5.1: int = id n5.0;
  n6.1: int = id n6.0;
.main.b1:
  size.0.0: int = const 6;
  array.0.0: ptr<int> = call @pack size.0.0 n1.0 n2.0 n3.0 n4.0 n5.0 n6.0;
  one.0.0: int = const 1;
  size_minus_one.0.0: int = sub size.0.0 one.0.0;
  zero.0.0: int = const 0;
  call @qsort array.0.0 zero.0.0 size_minus_one.0.0;
  call @print_array array.0.0 size.0.0;
  free array.0.0;
}
@qsort(array.0: ptr<int>, l.0: int, r.0: int) {
.qsort.b0:
  array.1: ptr<int> = id array.0;
  l.1: int = id l.0;
  r.1: int = id r.0;
.qsort.b1:
  l_ge_r.0.0: bool = ge l.0 r.0;
  zero.0.0: int = const 0;
  neg_r.0.0: bool = lt r.0 zero.0.0;
  ret_cond.0.0: bool = or l_ge_r.0.0 neg_r.0.0;
  br ret_cond.0.0 .done .continue;
.continue:
  p.0.0: int = call @partition array.0 l.0 r.0;
  one.0.0: int = const 1;
  p_minus_one.0.0: int = sub p.0.0 one.0.0;
  p_plus_one.0.0: int = add p.0.0 one.0.0;
  call @qsort array.0 l.0 p_minus_one.0.0;
  call @qsort array.0 p_plus_one.0.0 r.0;
.done:
  p_plus_one.0.1: int = phi p_plus_one.0.0 .continue;
  p_minus_one.0.1: int = phi p_minus_one.0.0 .continue;
  p.0.1: int = phi p.0.0 .continue;
  one.0.1: int = phi one.0.0 .continue;
  ret;
}
@partition(array.0: ptr<int>, l.0: int, r.0: int): int {
.partition.b0:
  array.1: ptr<int> = id array.0;
  l.1: int = id l.0;
  r.1: int = id r.0;
.partition.b1:
  pivot_loc.0.0: ptr<int> = ptradd array.0 r.0;
  pivot.0.0: int = load pivot_loc.0.0;
  one.0.0: int = const 1;
  i.0.0: int = sub l.0 one.0.0;
  j.0.0: int = id i.0.0;
.loop.init:
  swap_cond.0.0: bool = phi swap_cond.0.1 swap_cond.0.1 .body .swap;
  j_loc.0.0: ptr<int> = phi j_loc.0.1 j_loc.0.1 .body .swap;
  j.0.1: int = phi j.0.0 j.0.2 j.0.2 .partition.b1 .body .swap;
  i_loc.0.0: ptr<int> = phi i_loc.0.0 i_loc.0.1 .body .swap;
  i.0.1: int = phi i.0.0 i.0.1 i.0.2 .partition.b1 .body .swap;
  cond.0.0: bool = phi cond.0.1 cond.0.1 .body .swap;
  a_j.0.0: int = phi a_j.0.1 a_j.0.1 .body .swap;
  a_i.0.0: int = phi a_i.0.0 a_i.0.1 .body .swap;
  j.0.2: int = add j.0.1 one.0.0;
  cond.0.1: bool = lt j.0.2 r.0;
  br cond.0.1 .body .post.loop;
.body:
  j_loc.0.1: ptr<int> = ptradd array.0 j.0.2;
  a_j.0.1: int = load j_loc.0.1;
  swap_cond.0.1: bool = le a_j.0.1 pivot.0.0;
  br swap_cond.0.1 .swap .loop.init;
.swap:
  i.0.2: int = add i.0.1 one.0.0;
  i_loc.0.1: ptr<int> = ptradd array.0 i.0.2;
  a_i.0.1: int = load i_loc.0.1;
  store j_loc.0.1 a_i.0.1;
  store i_loc.0.1 a_j.0.1;
  jmp .loop.init;
.post.loop:
  i.0.3: int = add i.0.1 one.0.0;
  i_loc.0.2: ptr<int> = ptradd array.0 i.0.3;
  a_i.0.2: int = load i_loc.0.2;
  store i_loc.0.2 pivot.0.0;
  store pivot_loc.0.0 a_i.0.2;
  ret i.0.3;
}
@pack(size.0: int, n1.0: int, n2.0: int, n3.0: int, n4.0: int, n5.0: int, n6.0: int): ptr<int> {
.pack.b0:
  size.1: int = id size.0;
  n1.1: int = id n1.0;
  n2.1: int = id n2.0;
  n3.1: int = id n3.0;
  n4.1: int = id n4.0;
  n5.1: int = id n5.0;
  n6.1: int = id n6.0;
.pack.b1:
  one.0.0: int = const 1;
  i.0.0: int = const 0;
  array.0.0: ptr<int> = alloc size.0;
  loc.0.0: ptr<int> = ptradd array.0.0 i.0.0;
  store loc.0.0 n1.0;
  i.0.1: int = add i.0.0 one.0.0;
  loc.0.1: ptr<int> = ptradd array.0.0 i.0.1;
  store loc.0.1 n2.0;
  i.0.2: int = add i.0.1 one.0.0;
  loc.0.2: ptr<int> = ptradd array.0.0 i.0.2;
  store loc.0.2 n3.0;
  i.0.3: int = add i.0.2 one.0.0;
  loc.0.3: ptr<int> = ptradd array.0.0 i.0.3;
  store loc.0.3 n4.0;
  i.0.4: int = add i.0.3 one.0.0;
  loc.0.4: ptr<int> = ptradd array.0.0 i.0.4;
  store loc.0.4 n5.0;
  i.0.5: int = add i.0.4 one.0.0;
  loc.0.5: ptr<int> = ptradd array.0.0 i.0.5;
  store loc.0.5 n6.0;
  ret array.0.0;
}
@print_array(array.0: ptr<int>, size.0: int) {
.print_array.b0:
  array.1: ptr<int> = id array.0;
  size.1: int = id size.0;
.print_array.b1:
  i.0.0: int = const 0;
  one.0.0: int = const 1;
.loop:
  val.0.0: int = phi val.0.1 .loop_end;
  loc.0.0: ptr<int> = phi loc.0.1 .loop_end;
  i.0.1: int = phi i.0.0 i.0.2 .print_array.b1 .loop_end;
  cond.0.0: bool = phi cond.0.1 .loop_end;
  cond.0.1: bool = lt i.0.1 size.0;
  br cond.0.1 .body .done;
.body:
  loc.0.1: ptr<int> = ptradd array.0 i.0.1;
  val.0.1: int = load loc.0.1;
  print val.0.1;
.loop_end:
  i.0.2: int = add i.0.1 one.0.0;
  jmp .loop;
.done:
  ret;
}
