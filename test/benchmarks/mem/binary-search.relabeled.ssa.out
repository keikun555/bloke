@pack(size.0.0: int, n1.0.0: int, n2.0.0: int, n3.0.0: int, n4.0.0: int, n5.0.0: int): ptr<int> {
.pack.b0:
  size.0.1: int = id size.0.0;
  n1.0.1: int = id n1.0.0;
  n2.0.1: int = id n2.0.0;
  n3.0.1: int = id n3.0.0;
  n4.0.1: int = id n4.0.0;
  n5.0.1: int = id n5.0.0;
.pack.b1:
  one.0.0: int = const 1;
  i.0.0: int = const 0;
  array.0.0: ptr<int> = alloc size.0.1;
  loc.0.0: ptr<int> = ptradd array.0.0 i.0.0;
  store loc.0.0 n1.0.1;
  i.0.1: int = add i.0.0 one.0.0;
  loc.0.1: ptr<int> = ptradd array.0.0 i.0.1;
  store loc.0.1 n2.0.1;
  i.0.2: int = add i.0.1 one.0.0;
  loc.0.2: ptr<int> = ptradd array.0.0 i.0.2;
  store loc.0.2 n3.0.1;
  i.0.3: int = add i.0.2 one.0.0;
  loc.0.3: ptr<int> = ptradd array.0.0 i.0.3;
  store loc.0.3 n4.0.1;
  i.0.4: int = add i.0.3 one.0.0;
  loc.0.4: ptr<int> = ptradd array.0.0 i.0.4;
  store loc.0.4 n5.0.1;
  ret array.0.0;
}
@print_array(array.0.0: ptr<int>, size.0.0: int) {
.print_array.b0:
  array.0.1: ptr<int> = id array.0.0;
  size.0.1: int = id size.0.0;
.print_array.b1:
  i.0.0: int = const 0;
  one.0.0: int = const 1;
.loop:
  val.0.0: int = phi val.0.1 .loop_end;
  loc.0.0: ptr<int> = phi loc.0.1 .loop_end;
  i.0.1: int = phi i.0.0 i.0.2 .print_array.b1 .loop_end;
  cond.0.0: bool = phi cond.0.1 .loop_end;
  cond.0.1: bool = lt i.0.1 size.0.1;
  br cond.0.1 .body .done;
.body:
  loc.0.1: ptr<int> = ptradd array.0.1 i.0.1;
  val.0.1: int = load loc.0.1;
  print val.0.1;
.loop_end:
  i.0.2: int = add i.0.1 one.0.0;
  jmp .loop;
.done:
  ret;
}
@binary_search(array.0.0: ptr<int>, target.0.0: int, left.0.0: int, right.0.0: int): int {
.binary_search.b0:
  array.0.1: ptr<int> = id array.0.0;
  target.0.1: int = id target.0.0;
  left.0.1: int = id left.0.0;
  right.0.1: int = id right.0.0;
.binary_search.b1:
  negone.0.0: int = const -1;
  zero.0.0: int = const 0;
  one.0.0: int = const 1;
  two.0.0: int = const 2;
.check_valid:
  end_cond.0.0: bool = gt left.0.1 right.0.1;
  br end_cond.0.0 .end .body;
.body:
  mid.0.0: int = add left.0.1 right.0.1;
  mid.0.1: int = div mid.0.0 two.0.0;
.check_equal:
  midloc.0.0: ptr<int> = ptradd array.0.1 mid.0.1;
  midval.0.0: int = load midloc.0.0;
  equal_cond.0.0: bool = eq target.0.1 midval.0.0;
  br equal_cond.0.0 .found .check_gt;
.found:
  ret mid.0.1;
.check_gt:
  gt_cond.0.0: bool = gt target.0.1 midval.0.0;
  br gt_cond.0.0 .call_gt .call_lt;
.call_gt:
  newleft.0.0: int = add left.0.1 one.0.0;
  output.0.2: int = call @binary_search array.0.1 target.0.1 newleft.0.0 right.0.1;
  ret output.0.2;
.call_lt:
  newright.0.0: int = sub right.0.1 one.0.0;
  output.0.1: int = call @binary_search array.0.1 target.0.1 left.0.1 newright.0.0;
  ret output.0.1;
.end:
  output.0.0: int = id negone.0.0;
  ret output.0.0;
}
@main {
.main.b0:
  target.0.0: int = const 7;
  size.0.0: int = const 5;
  e1.0.0: int = const 1;
  e2.0.0: int = const 2;
  e3.0.0: int = const 6;
  e4.0.0: int = const 7;
  e5.0.0: int = const 11;
  zero.0.0: int = const 0;
  four.0.0: int = const 4;
  array.0.0: ptr<int> = call @pack size.0.0 e1.0.0 e2.0.0 e3.0.0 e4.0.0 e5.0.0;
  output.0.0: int = call @binary_search array.0.0 target.0.0 zero.0.0 four.0.0;
  print output.0.0;
  free array.0.0;
}
