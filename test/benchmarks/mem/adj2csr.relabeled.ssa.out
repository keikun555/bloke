@rand(seq.0.0: ptr<int>, max.0.0: int): int {
.rand.b0:
  seq.0.1: ptr<int> = id seq.0.0;
  max.0.1: int = id max.0.0;
.rand.b1:
  a.0.0: int = const 25214903917;
  c.0.0: int = const 11;
  m.0.0: int = const 281474976710656;
  x.0.0: int = load seq.0.1;
  ax.0.0: int = mul a.0.0 x.0.0;
  axpc.0.0: int = add ax.0.0 c.0.0;
  next.0.0: int = div axpc.0.0 m.0.0;
  next.0.1: int = mul next.0.0 m.0.0;
  next.0.2: int = sub axpc.0.0 next.0.1;
  store seq.0.1 next.0.2;
  val.0.0: int = div next.0.2 max.0.1;
  val.0.1: int = mul val.0.0 max.0.1;
  val.0.2: int = sub next.0.2 val.0.1;
  ret val.0.2;
}
@randarray(size.0.0: int, rng.0.0: ptr<int>): ptr<int> {
.randarray.b0:
  size.0.1: int = id size.0.0;
  rng.0.1: ptr<int> = id rng.0.0;
.randarray.b1:
  arr.0.0: ptr<int> = alloc size.0.1;
  i.0.0: int = const 0;
  max.0.0: int = const 2;
  one.0.0: int = const 1;
  zero.0.0: int = const 0;
.loop:
  val.0.0: int = phi val.0.3 .loop_end;
  loc.0.0: ptr<int> = phi loc.0.1 .loop_end;
  if_cond.0.0: bool = phi if_cond.0.1 .loop_end;
  i.0.1: int = phi i.0.0 i.0.2 .randarray.b1 .loop_end;
  cond.0.0: bool = phi cond.0.1 .loop_end;
  cond.0.1: bool = lt i.0.1 size.0.1;
  br cond.0.1 .body .done;
.body:
  val.0.1: int = call @rand rng.0.1 max.0.0;
  if_cond.0.1: bool = lt val.0.1 zero.0.0;
  br if_cond.0.1 .if_body .if_done;
.if_body:
  val.0.2: int = const 0;
.if_done:
  val.0.3: int = phi val.0.1 val.0.2 .body .if_body;
  loc.0.1: ptr<int> = ptradd arr.0.0 i.0.1;
  store loc.0.1 val.0.3;
.loop_end:
  i.0.2: int = add i.0.1 one.0.0;
  jmp .loop;
.done:
  ret arr.0.0;
}
@printarray(size.0.0: int, arr.0.0: ptr<int>) {
.printarray.b0:
  size.0.1: int = id size.0.0;
  arr.0.1: ptr<int> = id arr.0.0;
.printarray.b1:
  i.0.0: int = const 0;
  one.0.0: int = const 1;
.loop:
  val.0.0: int = phi val.0.1 .loop_end;
  loc.0.0: ptr<int> = phi loc.0.1 .loop_end;
  i.0.1: int = phi i.0.0 i.0.2 .printarray.b1 .loop_end;
  cond.0.0: bool = phi cond.0.1 .loop_end;
  cond.0.1: bool = lt i.0.1 size.0.1;
  br cond.0.1 .body .done;
.body:
  loc.0.1: ptr<int> = ptradd arr.0.1 i.0.1;
  val.0.1: int = load loc.0.1;
  print val.0.1;
.loop_end:
  i.0.2: int = add i.0.1 one.0.0;
  jmp .loop;
.done:
  ret;
}
@zeroarray(size.0.0: int): ptr<int> {
.zeroarray.b0:
  size.0.1: int = id size.0.0;
.zeroarray.b1:
  arr.0.0: ptr<int> = alloc size.0.1;
  i.0.0: int = const 0;
  zero.0.0: int = const 0;
  one.0.0: int = const 1;
.loop:
  loc.0.0: ptr<int> = phi loc.0.1 .loop_end;
  i.0.1: int = phi i.0.0 i.0.2 .zeroarray.b1 .loop_end;
  cond.0.0: bool = phi cond.0.1 .loop_end;
  cond.0.1: bool = lt i.0.1 size.0.1;
  br cond.0.1 .body .done;
.body:
  loc.0.1: ptr<int> = ptradd arr.0.0 i.0.1;
  store loc.0.1 zero.0.0;
.loop_end:
  i.0.2: int = add i.0.1 one.0.0;
  jmp .loop;
.done:
  ret arr.0.0;
}
@adj2csr(num_nodes.0.0: int, adjmat.0.0: ptr<int>, csr_offset.0.0: ptr<int>, csr_edges.0.0: ptr<int>): int {
.adj2csr.b0:
  num_nodes.0.1: int = id num_nodes.0.0;
  adjmat.0.1: ptr<int> = id adjmat.0.0;
  csr_offset.0.1: ptr<int> = id csr_offset.0.0;
  csr_edges.0.1: ptr<int> = id csr_edges.0.0;
.adj2csr.b1:
  num_edges.0.0: int = const 0;
  row.0.0: int = const 0;
  one.0.0: int = const 1;
.iter_row:
  row_tmp.0.0: int = phi row_tmp.0.1 .row_end;
  row_cond.0.0: bool = phi row_cond.0.1 .row_end;
  row.0.1: int = phi row.0.0 row.0.2 .adj2csr.b1 .row_end;
  offset_loc.0.0: ptr<int> = phi offset_loc.0.1 .row_end;
  num_edges.0.1: int = phi num_edges.0.0 num_edges.0.2 .adj2csr.b1 .row_end;
  node_val.0.0: int = phi node_val.0.1 .row_end;
  node_loc.0.0: ptr<int> = phi node_loc.0.1 .row_end;
  node_idx.0.0: int = phi node_idx.0.1 .row_end;
  edge_loc.0.0: ptr<int> = phi edge_loc.0.1 .row_end;
  cond.0.0: bool = phi cond.0.1 .row_end;
  col_cond.0.0: bool = phi col_cond.0.2 .row_end;
  col.0.0: int = phi col.0.2 .row_end;
  row_cond.0.1: bool = lt row.0.1 num_nodes.0.1;
  col.0.1: int = const 0;
  br row_cond.0.1 .iter_col .row_done;
.iter_col:
  row_tmp.0.1: int = phi row_tmp.0.0 row_tmp.0.2 .iter_row .col_end;
  num_edges.0.2: int = phi num_edges.0.1 num_edges.0.4 .iter_row .col_end;
  node_val.0.1: int = phi node_val.0.0 node_val.0.2 .iter_row .col_end;
  node_loc.0.1: ptr<int> = phi node_loc.0.0 node_loc.0.2 .iter_row .col_end;
  node_idx.0.1: int = phi node_idx.0.0 node_idx.0.2 .iter_row .col_end;
  edge_loc.0.1: ptr<int> = phi edge_loc.0.0 edge_loc.0.3 .iter_row .col_end;
  cond.0.1: bool = phi cond.0.0 cond.0.2 .iter_row .col_end;
  col_cond.0.1: bool = phi col_cond.0.0 col_cond.0.2 .iter_row .col_end;
  col.0.2: int = phi col.0.1 col.0.3 .iter_row .col_end;
  col_cond.0.2: bool = lt col.0.2 num_nodes.0.1;
  br col_cond.0.2 .col_body .col_done;
.col_body:
  row_tmp.0.2: int = mul row.0.1 num_nodes.0.1;
  node_idx.0.2: int = add row_tmp.0.2 col.0.2;
  node_loc.0.2: ptr<int> = ptradd adjmat.0.1 node_idx.0.2;
  node_val.0.2: int = load node_loc.0.2;
  cond.0.2: bool = eq node_val.0.2 one.0.0;
  br cond.0.2 .if_body .col_end;
.if_body:
  edge_loc.0.2: ptr<int> = ptradd csr_edges.0.1 num_edges.0.2;
  store edge_loc.0.2 col.0.2;
  num_edges.0.3: int = add num_edges.0.2 one.0.0;
.col_end:
  num_edges.0.4: int = phi num_edges.0.2 num_edges.0.3 .col_body .if_body;
  edge_loc.0.3: ptr<int> = phi edge_loc.0.1 edge_loc.0.2 .col_body .if_body;
  col.0.3: int = add col.0.2 one.0.0;
  jmp .iter_col;
.col_done:
  offset_loc.0.1: ptr<int> = ptradd csr_offset.0.1 row.0.1;
  store offset_loc.0.1 num_edges.0.2;
.row_end:
  row.0.2: int = add row.0.1 one.0.0;
  jmp .iter_row;
.row_done:
  ret num_edges.0.1;
}
@main(num_nodes.0.0: int, seed.0.0: int) {
.main.b0:
  num_nodes.0.1: int = id num_nodes.0.0;
  seed.0.1: int = id seed.0.0;
.main.b1:
  one.0.0: int = const 1;
  rng.0.0: ptr<int> = alloc one.0.0;
  store rng.0.0 seed.0.1;
  sqsize.0.0: int = mul num_nodes.0.1 num_nodes.0.1;
  adjmat.0.0: ptr<int> = call @randarray sqsize.0.0 rng.0.0;
  csr_offset.0.0: ptr<int> = call @zeroarray sqsize.0.0;
  csr_edges.0.0: ptr<int> = call @zeroarray sqsize.0.0;
  num_edges.0.0: int = call @adj2csr num_nodes.0.1 adjmat.0.0 csr_offset.0.0 csr_edges.0.0;
  print num_nodes.0.1;
  print num_edges.0.0;
  call @printarray sqsize.0.0 adjmat.0.0;
  call @printarray num_nodes.0.1 csr_offset.0.0;
  call @printarray num_edges.0.0 csr_edges.0.0;
  free adjmat.0.0;
  free csr_offset.0.0;
  free csr_edges.0.0;
  free rng.0.0;
  ret;
}
