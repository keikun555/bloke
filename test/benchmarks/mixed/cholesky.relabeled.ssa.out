@fillarray: ptr<float> {
.fillarray.b0:
  a00.0.0: float = const 34;
  a01.0.0: float = const 28;
  a02.0.0: float = const 38;
  a03.0.0: float = const 29;
  a10.0.0: float = const 26;
  a11.0.0: float = const 78;
  a12.0.0: float = const 91;
  a13.0.0: float = const 83;
  a20.0.0: float = const 67;
  a21.0.0: float = const 92;
  a22.0.0: float = const 56;
  a23.0.0: float = const 92;
  a30.0.0: float = const 67;
  a31.0.0: float = const 826;
  a32.0.0: float = const 38;
  a33.0.0: float = const 43;
  size.0.0: int = const 16;
  return_ptr.0.0: ptr<float> = alloc size.0.0;
  arr.0.0: ptr<float> = id return_ptr.0.0;
  one.0.0: int = const 1;
  store arr.0.0 a00.0.0;
  arr.0.1: ptr<float> = ptradd arr.0.0 one.0.0;
  store arr.0.1 a01.0.0;
  arr.0.2: ptr<float> = ptradd arr.0.1 one.0.0;
  store arr.0.2 a02.0.0;
  arr.0.3: ptr<float> = ptradd arr.0.2 one.0.0;
  store arr.0.3 a03.0.0;
  arr.0.4: ptr<float> = ptradd arr.0.3 one.0.0;
  store arr.0.4 a10.0.0;
  arr.0.5: ptr<float> = ptradd arr.0.4 one.0.0;
  store arr.0.5 a11.0.0;
  arr.0.6: ptr<float> = ptradd arr.0.5 one.0.0;
  store arr.0.6 a12.0.0;
  arr.0.7: ptr<float> = ptradd arr.0.6 one.0.0;
  store arr.0.7 a13.0.0;
  arr.0.8: ptr<float> = ptradd arr.0.7 one.0.0;
  store arr.0.8 a20.0.0;
  arr.0.9: ptr<float> = ptradd arr.0.8 one.0.0;
  store arr.0.9 a21.0.0;
  arr.0.10: ptr<float> = ptradd arr.0.9 one.0.0;
  store arr.0.10 a22.0.0;
  arr.0.11: ptr<float> = ptradd arr.0.10 one.0.0;
  store arr.0.11 a23.0.0;
  arr.0.12: ptr<float> = ptradd arr.0.11 one.0.0;
  store arr.0.12 a30.0.0;
  arr.0.13: ptr<float> = ptradd arr.0.12 one.0.0;
  store arr.0.13 a31.0.0;
  arr.0.14: ptr<float> = ptradd arr.0.13 one.0.0;
  store arr.0.14 a32.0.0;
  arr.0.15: ptr<float> = ptradd arr.0.14 one.0.0;
  store arr.0.15 a33.0.0;
  ret return_ptr.0.0;
}
@zeros(sqsize.0: int): ptr<float> {
.zeros.b0:
  sqsize.1: int = id sqsize.0;
.zeros.b1:
  arr.0.0: ptr<float> = alloc sqsize.0;
  i.0.0: int = const 0;
  one.0.0: int = const 1;
  zero.0.0: float = const 0;
.loop:
  loc.0.0: ptr<float> = phi loc.0.1 .loop_end;
  i.0.1: int = phi i.0.0 i.0.2 .zeros.b1 .loop_end;
  cond.0.0: bool = phi cond.0.1 .loop_end;
  cond.0.1: bool = lt i.0.1 sqsize.0;
  br cond.0.1 .body .done;
.body:
  loc.0.1: ptr<float> = ptradd arr.0.0 i.0.1;
  store loc.0.1 zero.0.0;
.loop_end:
  i.0.2: int = add i.0.1 one.0.0;
  jmp .loop;
.done:
  ret arr.0.0;
}
@printarray(size.0: int, arr.0: ptr<float>) {
.printarray.b0:
  size.1: int = id size.0;
  arr.1: ptr<float> = id arr.0;
.printarray.b1:
  i.0.0: int = const 0;
  one.0.0: int = const 1;
.loop:
  val.0.0: float = phi val.0.1 .loop_end;
  loc.0.0: ptr<float> = phi loc.0.1 .loop_end;
  i.0.1: int = phi i.0.0 i.0.2 .printarray.b1 .loop_end;
  cond.0.0: bool = phi cond.0.1 .loop_end;
  cond.0.1: bool = lt i.0.1 size.0;
  br cond.0.1 .body .done;
.body:
  loc.0.1: ptr<float> = ptradd arr.0 i.0.1;
  val.0.1: float = load loc.0.1;
  print val.0.1;
.loop_end:
  i.0.2: int = add i.0.1 one.0.0;
  jmp .loop;
.done:
  ret;
}
@matmul(size.0: int, arr1.0: ptr<float>, arr2.0: ptr<float>, dest.0: ptr<float>) {
.matmul.b0:
  size.1: int = id size.0;
  arr1.1: ptr<float> = id arr1.0;
  arr2.1: ptr<float> = id arr2.0;
  dest.1: ptr<float> = id dest.0;
.matmul.b1:
  one.0.0: int = const 1;
  row.0.0: int = const 0;
.row.loop:
  sum.0.0: float = phi sum.0.1 .row.loop_end;
  rvalloc.0.0: ptr<float> = phi rvalloc.0.1 .row.loop_end;
  rval.0.0: float = phi rval.0.1 .row.loop_end;
  row.0.1: int = phi row.0.0 row.0.2 .matmul.b1 .row.loop_end;
  ridx.0.0: int = phi ridx.0.1 .row.loop_end;
  prod.0.0: float = phi prod.0.1 .row.loop_end;
  lvalloc.0.0: ptr<float> = phi lvalloc.0.1 .row.loop_end;
  lval.0.0: float = phi lval.0.1 .row.loop_end;
  loc.0.0: ptr<float> = phi loc.0.1 .row.loop_end;
  lidx.0.0: int = phi lidx.0.1 .row.loop_end;
  idx.0.0: int = phi idx.0.1 .row.loop_end;
  i.0.0: int = phi i.0.1 .row.loop_end;
  cond.0.0: bool = phi cond.0.3 .row.loop_end;
  col.0.0: int = phi col.0.2 .row.loop_end;
  cond.0.1: bool = lt row.0.1 size.0;
  br cond.0.1 .row.body .row.done;
.row.body:
  col.0.1: int = const 0;
.col.loop:
  sum.0.1: float = phi sum.0.0 sum.0.3 .row.body .col.loop_end;
  rvalloc.0.1: ptr<float> = phi rvalloc.0.0 rvalloc.0.2 .row.body .col.loop_end;
  rval.0.1: float = phi rval.0.0 rval.0.2 .row.body .col.loop_end;
  ridx.0.1: int = phi ridx.0.0 ridx.0.2 .row.body .col.loop_end;
  prod.0.1: float = phi prod.0.0 prod.0.2 .row.body .col.loop_end;
  lvalloc.0.1: ptr<float> = phi lvalloc.0.0 lvalloc.0.2 .row.body .col.loop_end;
  lval.0.1: float = phi lval.0.0 lval.0.2 .row.body .col.loop_end;
  loc.0.1: ptr<float> = phi loc.0.0 loc.0.2 .row.body .col.loop_end;
  lidx.0.1: int = phi lidx.0.0 lidx.0.2 .row.body .col.loop_end;
  idx.0.1: int = phi idx.0.0 idx.0.3 .row.body .col.loop_end;
  i.0.1: int = phi i.0.0 i.0.3 .row.body .col.loop_end;
  cond.0.2: bool = phi cond.0.1 cond.0.5 .row.body .col.loop_end;
  col.0.2: int = phi col.0.1 col.0.3 .row.body .col.loop_end;
  cond.0.3: bool = lt col.0.2 size.0;
  br cond.0.3 .col.body .col.done;
.col.body:
  sum.0.2: float = const 0.0;
  i.0.2: int = const 0;
.sum.loop:
  sum.0.3: float = phi sum.0.2 sum.0.4 .col.body .sum.loop_end;
  rvalloc.0.2: ptr<float> = phi rvalloc.0.1 rvalloc.0.3 .col.body .sum.loop_end;
  rval.0.2: float = phi rval.0.1 rval.0.3 .col.body .sum.loop_end;
  ridx.0.2: int = phi ridx.0.1 ridx.0.4 .col.body .sum.loop_end;
  prod.0.2: float = phi prod.0.1 prod.0.3 .col.body .sum.loop_end;
  lvalloc.0.2: ptr<float> = phi lvalloc.0.1 lvalloc.0.3 .col.body .sum.loop_end;
  lval.0.2: float = phi lval.0.1 lval.0.3 .col.body .sum.loop_end;
  lidx.0.2: int = phi lidx.0.1 lidx.0.4 .col.body .sum.loop_end;
  i.0.3: int = phi i.0.2 i.0.4 .col.body .sum.loop_end;
  cond.0.4: bool = phi cond.0.3 cond.0.5 .col.body .sum.loop_end;
  cond.0.5: bool = lt i.0.3 size.0;
  br cond.0.5 .sum.body .sum.done;
.sum.body:
  lidx.0.3: int = mul row.0.1 size.0;
  lidx.0.4: int = add lidx.0.3 i.0.3;
  ridx.0.3: int = mul i.0.3 size.0;
  ridx.0.4: int = add ridx.0.3 col.0.2;
  lvalloc.0.3: ptr<float> = ptradd arr1.0 lidx.0.4;
  lval.0.3: float = load lvalloc.0.3;
  rvalloc.0.3: ptr<float> = ptradd arr2.0 ridx.0.4;
  rval.0.3: float = load rvalloc.0.3;
  prod.0.3: float = fmul lval.0.3 rval.0.3;
  sum.0.4: float = fadd sum.0.3 prod.0.3;
.sum.loop_end:
  i.0.4: int = add i.0.3 one.0.0;
  jmp .sum.loop;
.sum.done:
  idx.0.2: int = mul row.0.1 size.0;
  idx.0.3: int = add idx.0.2 col.0.2;
  loc.0.2: ptr<float> = ptradd dest.0 idx.0.3;
  store loc.0.2 sum.0.3;
.col.loop_end:
  col.0.3: int = add col.0.2 one.0.0;
  jmp .col.loop;
.col.done:
.row.loop_end:
  row.0.2: int = add row.0.1 one.0.0;
  jmp .row.loop;
.row.done:
  ret;
}
@transpose(size.0: int, input.0: ptr<float>, output.0: ptr<float>) {
.transpose.b0:
  size.1: int = id size.0;
  input.1: ptr<float> = id input.0;
  output.1: ptr<float> = id output.0;
.transpose.b1:
  one.0.0: int = const 1;
  row.0.0: int = const 0;
.row.loop:
  value.0.0: float = phi value.0.1 .row.loop_end;
  srcptr.0.0: ptr<float> = phi srcptr.0.1 .row.loop_end;
  srcidx.0.0: int = phi srcidx.0.1 .row.loop_end;
  row.0.1: int = phi row.0.0 row.0.2 .transpose.b1 .row.loop_end;
  dstptr.0.0: ptr<float> = phi dstptr.0.1 .row.loop_end;
  dstidx.0.0: int = phi dstidx.0.1 .row.loop_end;
  cond.0.0: bool = phi cond.0.3 .row.loop_end;
  col.0.0: int = phi col.0.2 .row.loop_end;
  cond.0.1: bool = lt row.0.1 size.0;
  br cond.0.1 .row.body .row.done;
.row.body:
  col.0.1: int = const 0;
.col.loop:
  value.0.1: float = phi value.0.0 value.0.2 .row.body .col.loop_end;
  srcptr.0.1: ptr<float> = phi srcptr.0.0 srcptr.0.2 .row.body .col.loop_end;
  srcidx.0.1: int = phi srcidx.0.0 srcidx.0.3 .row.body .col.loop_end;
  dstptr.0.1: ptr<float> = phi dstptr.0.0 dstptr.0.2 .row.body .col.loop_end;
  dstidx.0.1: int = phi dstidx.0.0 dstidx.0.3 .row.body .col.loop_end;
  cond.0.2: bool = phi cond.0.1 cond.0.3 .row.body .col.loop_end;
  col.0.2: int = phi col.0.1 col.0.3 .row.body .col.loop_end;
  cond.0.3: bool = lt col.0.2 size.0;
  br cond.0.3 .col.body .col.done;
.col.body:
  srcidx.0.2: int = mul row.0.1 size.0;
  srcidx.0.3: int = add srcidx.0.2 col.0.2;
  dstidx.0.2: int = mul col.0.2 size.0;
  dstidx.0.3: int = add dstidx.0.2 row.0.1;
  srcptr.0.2: ptr<float> = ptradd input.0 srcidx.0.3;
  dstptr.0.2: ptr<float> = ptradd output.0 dstidx.0.3;
  value.0.2: float = load srcptr.0.2;
  store dstptr.0.2 value.0.2;
.col.loop_end:
  col.0.3: int = add col.0.2 one.0.0;
  jmp .col.loop;
.col.done:
.row.loop_end:
  row.0.2: int = add row.0.1 one.0.0;
  jmp .row.loop;
.row.done:
  ret;
}
@sqrt(input.0: float): float {
.sqrt.b0:
  input.1: float = id input.0;
.sqrt.b1:
  n.0.0: float = id input.0;
  v1.0.0: float = const 1e-05;
  precision.0.0: float = id v1.0.0;
  v2.0.0: float = id n.0.0;
  x.0.0: float = id v2.0.0;
  v3.0.0: bool = const true;
  notdone.0.0: bool = id v3.0.0;
.for.cond.4:
  x.0.1: float = phi x.0.0 x.0.2 .sqrt.b1 .endif.25;
  v9.0.0: float = phi v9.0.1 .endif.25;
  v8.0.0: float = phi v8.0.1 .endif.25;
  v7.0.0: float = phi v7.0.1 .endif.25;
  v6.0.0: float = phi v6.0.1 .endif.25;
  v5.0.0: bool = phi v5.0.1 .endif.25;
  v30.0.0: float = phi v30.0.1 .endif.25;
  v29.0.0: bool = phi v29.0.1 .endif.25;
  v28.0.0: bool = phi v28.0.1 .endif.25;
  v27.0.0: float = phi v27.0.1 .endif.25;
  v26.0.0: float = phi v26.0.1 .endif.25;
  v24.0.0: float = phi v24.0.2 .endif.25;
  v23.0.0: float = phi v23.0.2 .endif.25;
  v22.0.0: float = phi v22.0.2 .endif.25;
  v21.0.0: bool = phi v21.0.1 .endif.25;
  v20.0.0: float = phi v20.0.1 .endif.25;
  v19.0.0: float = phi v19.0.1 .endif.25;
  v17.0.0: float = phi v17.0.1 .endif.25;
  v16.0.0: float = phi v16.0.1 .endif.25;
  v15.0.0: float = phi v15.0.1 .endif.25;
  v14.0.0: float = phi v14.0.1 .endif.25;
  v13.0.0: float = phi v13.0.1 .endif.25;
  v12.0.0: float = phi v12.0.1 .endif.25;
  v11.0.0: float = phi v11.0.1 .endif.25;
  v10.0.0: float = phi v10.0.1 .endif.25;
  root.0.0: float = phi root.0.3 .endif.25;
  notdone.0.1: bool = phi notdone.0.0 notdone.0.2 .sqrt.b1 .endif.25;
  diff.0.0: float = phi diff.0.3 .endif.25;
  v5.0.1: bool = id notdone.0.1;
  br v5.0.1 .for.body.4 .for.end.4;
.for.body.4:
  v6.0.1: float = id n.0.0;
  v7.0.1: float = id x.0.1;
  v8.0.1: float = fdiv v6.0.1 v7.0.1;
  root.0.1: float = id v8.0.1;
  v9.0.1: float = id x.0.1;
  v10.0.1: float = id root.0.1;
  v11.0.1: float = fadd v9.0.1 v10.0.1;
  root.0.2: float = id v11.0.1;
  v12.0.1: float = const 0.5;
  v13.0.1: float = id root.0.2;
  v14.0.1: float = fmul v12.0.1 v13.0.1;
  root.0.3: float = id v14.0.1;
  v15.0.1: float = id root.0.3;
  v16.0.1: float = id x.0.1;
  v17.0.1: float = fsub v15.0.1 v16.0.1;
  diff.0.1: float = id v17.0.1;
  v19.0.1: float = id diff.0.1;
  v20.0.1: float = const 0;
  v21.0.1: bool = flt v19.0.1 v20.0.1;
  br v21.0.1 .then.18 .else.18;
.then.18:
  v22.0.1: float = const 0;
  v23.0.1: float = id diff.0.1;
  v24.0.1: float = fsub v22.0.1 v23.0.1;
  diff.0.2: float = id v24.0.1;
  jmp .endif.18;
.else.18:
.endif.18:
  v24.0.2: float = phi v24.0.1 v24.0.0 .then.18 .else.18;
  v23.0.2: float = phi v23.0.1 v23.0.0 .then.18 .else.18;
  v22.0.2: float = phi v22.0.1 v22.0.0 .then.18 .else.18;
  diff.0.3: float = phi diff.0.2 diff.0.1 .then.18 .else.18;
  v26.0.1: float = id diff.0.3;
  v27.0.1: float = id precision.0.0;
  v28.0.1: bool = flt v26.0.1 v27.0.1;
  br v28.0.1 .then.25 .else.25;
.then.25:
  v29.0.2: bool = const false;
  notdone.0.3: bool = id v29.0.2;
  jmp .endif.25;
.else.25:
.endif.25:
  v29.0.1: bool = phi v29.0.0 v29.0.2 .else.25 .then.25;
  notdone.0.2: bool = phi notdone.0.1 notdone.0.3 .else.25 .then.25;
  v30.0.1: float = id root.0.3;
  x.0.2: float = id v30.0.1;
  jmp .for.cond.4;
.for.end.4:
  ret x.0.1;
}
@cholesky(size.0: int, arr1.0: ptr<float>, arr2.0: ptr<float>) {
.cholesky.b0:
  size.1: int = id size.0;
  arr1.1: ptr<float> = id arr1.0;
  arr2.1: ptr<float> = id arr2.0;
.cholesky.b1:
  one.0.0: int = const 1;
  i.0.0: int = const 0;
.i.loop:
  value.0.0: float = phi value.0.2 .i.loop_end;
  sqrt_value.0.0: float = phi sqrt_value.0.1 .i.loop_end;
  k.0.0: int = phi k.0.1 .i.loop_end;
  jk_ptr.0.0: ptr<float> = phi jk_ptr.0.1 .i.loop_end;
  jk_index.0.0: int = phi jk_index.0.1 .i.loop_end;
  jj_ptr.0.0: ptr<float> = phi jj_ptr.0.1 .i.loop_end;
  jj_index.0.0: int = phi jj_index.0.1 .i.loop_end;
  j.0.0: int = phi j.0.2 .i.loop_end;
  ik_ptr.0.0: ptr<float> = phi ik_ptr.0.1 .i.loop_end;
  ik_index.0.0: int = phi ik_index.0.1 .i.loop_end;
  ij_ptr.0.0: ptr<float> = phi ij_ptr.0.1 .i.loop_end;
  ij_index.0.0: int = phi ij_index.0.1 .i.loop_end;
  ii_index.0.0: int = phi ii_index.0.2 .i.loop_end;
  i.0.1: int = phi i.0.0 i.0.2 .cholesky.b1 .i.loop_end;
  condk.0.0: bool = phi condk.0.1 .i.loop_end;
  condj.0.0: bool = phi condj.0.2 .i.loop_end;
  condi.0.0: bool = phi condi.0.1 .i.loop_end;
  b_jk.0.0: float = phi b_jk.0.1 .i.loop_end;
  b_jj.0.0: float = phi b_jj.0.1 .i.loop_end;
  b_ik.0.0: float = phi b_ik.0.1 .i.loop_end;
  b_ij_ptr.0.0: ptr<float> = phi b_ij_ptr.0.1 .i.loop_end;
  b_ij.0.0: float = phi b_ij.0.1 .i.loop_end;
  b_ii_ptr.0.0: ptr<float> = phi b_ii_ptr.0.1 .i.loop_end;
  a_ij_ptr.0.0: ptr<float> = phi a_ij_ptr.0.1 .i.loop_end;
  a_ij.0.0: float = phi a_ij.0.1 .i.loop_end;
  a_ii_ptr.0.0: ptr<float> = phi a_ii_ptr.0.1 .i.loop_end;
  condi.0.1: bool = lt i.0.1 size.0;
  br condi.0.1 .i.body .i.done;
.i.body:
  j.0.1: int = const 0;
.j.loop:
  value.0.1: float = phi value.0.0 value.0.4 .i.body .j.loop_end;
  k.0.1: int = phi k.0.0 k.0.3 .i.body .j.loop_end;
  jk_ptr.0.1: ptr<float> = phi jk_ptr.0.0 jk_ptr.0.2 .i.body .j.loop_end;
  jk_index.0.1: int = phi jk_index.0.0 jk_index.0.2 .i.body .j.loop_end;
  jj_ptr.0.1: ptr<float> = phi jj_ptr.0.0 jj_ptr.0.2 .i.body .j.loop_end;
  jj_index.0.1: int = phi jj_index.0.0 jj_index.0.3 .i.body .j.loop_end;
  j.0.2: int = phi j.0.1 j.0.3 .i.body .j.loop_end;
  ik_ptr.0.1: ptr<float> = phi ik_ptr.0.0 ik_ptr.0.2 .i.body .j.loop_end;
  ik_index.0.1: int = phi ik_index.0.0 ik_index.0.2 .i.body .j.loop_end;
  ij_ptr.0.1: ptr<float> = phi ij_ptr.0.0 ij_ptr.0.2 .i.body .j.loop_end;
  ij_index.0.1: int = phi ij_index.0.0 ij_index.0.4 .i.body .j.loop_end;
  condk.0.1: bool = phi condk.0.0 condk.0.3 .i.body .j.loop_end;
  condj.0.1: bool = phi condj.0.0 condj.0.2 .i.body .j.loop_end;
  b_jk.0.1: float = phi b_jk.0.0 b_jk.0.2 .i.body .j.loop_end;
  b_jj.0.1: float = phi b_jj.0.0 b_jj.0.2 .i.body .j.loop_end;
  b_ik.0.1: float = phi b_ik.0.0 b_ik.0.2 .i.body .j.loop_end;
  b_ij_ptr.0.1: ptr<float> = phi b_ij_ptr.0.0 b_ij_ptr.0.2 .i.body .j.loop_end;
  b_ij.0.1: float = phi b_ij.0.0 b_ij.0.2 .i.body .j.loop_end;
  a_ij_ptr.0.1: ptr<float> = phi a_ij_ptr.0.0 a_ij_ptr.0.2 .i.body .j.loop_end;
  a_ij.0.1: float = phi a_ij.0.0 a_ij.0.3 .i.body .j.loop_end;
  condj.0.2: bool = le j.0.2 i.0.1;
  br condj.0.2 .j.body .j.done;
.j.body:
  k.0.2: int = const 0;
.k.loop:
  value.0.3: float = phi value.0.1 value.0.6 .j.body .k.loop_end;
  k.0.3: int = phi k.0.2 k.0.4 .j.body .k.loop_end;
  jk_ptr.0.2: ptr<float> = phi jk_ptr.0.1 jk_ptr.0.3 .j.body .k.loop_end;
  jk_index.0.2: int = phi jk_index.0.1 jk_index.0.4 .j.body .k.loop_end;
  ik_ptr.0.2: ptr<float> = phi ik_ptr.0.1 ik_ptr.0.3 .j.body .k.loop_end;
  ik_index.0.2: int = phi ik_index.0.1 ik_index.0.4 .j.body .k.loop_end;
  ij_ptr.0.2: ptr<float> = phi ij_ptr.0.1 ij_ptr.0.3 .j.body .k.loop_end;
  ij_index.0.2: int = phi ij_index.0.1 ij_index.0.6 .j.body .k.loop_end;
  condk.0.2: bool = phi condk.0.1 condk.0.3 .j.body .k.loop_end;
  b_jk.0.2: float = phi b_jk.0.1 b_jk.0.3 .j.body .k.loop_end;
  b_ik.0.2: float = phi b_ik.0.1 b_ik.0.3 .j.body .k.loop_end;
  a_ij.0.2: float = phi a_ij.0.1 a_ij.0.4 .j.body .k.loop_end;
  condk.0.3: bool = lt k.0.3 j.0.2;
  br condk.0.3 .k.body .k.done;
.k.body:
  ik_index.0.3: int = mul i.0.1 size.0;
  ik_index.0.4: int = add ik_index.0.3 k.0.3;
  jk_index.0.3: int = mul j.0.2 size.0;
  jk_index.0.4: int = add jk_index.0.3 k.0.3;
  ij_index.0.5: int = mul i.0.1 size.0;
  ij_index.0.6: int = add ij_index.0.5 j.0.2;
  ik_ptr.0.3: ptr<float> = ptradd arr2.0 ik_index.0.4;
  b_ik.0.3: float = load ik_ptr.0.3;
  jk_ptr.0.3: ptr<float> = ptradd arr2.0 jk_index.0.4;
  b_jk.0.3: float = load jk_ptr.0.3;
  ij_ptr.0.3: ptr<float> = ptradd arr1.0 ij_index.0.6;
  a_ij.0.4: float = load ij_ptr.0.3;
  value.0.5: float = fmul b_ik.0.3 b_jk.0.3;
  value.0.6: float = fsub a_ij.0.4 value.0.5;
  store ij_ptr.0.3 value.0.6;
.k.loop_end:
  k.0.4: int = add k.0.3 one.0.0;
  jmp .k.loop;
.k.done:
  ij_index.0.3: int = mul i.0.1 size.0;
  ij_index.0.4: int = add ij_index.0.3 j.0.2;
  jj_index.0.2: int = mul j.0.2 size.0;
  jj_index.0.3: int = add jj_index.0.2 j.0.2;
  a_ij_ptr.0.2: ptr<float> = ptradd arr1.0 ij_index.0.4;
  b_ij_ptr.0.2: ptr<float> = ptradd arr2.0 ij_index.0.4;
  jj_ptr.0.2: ptr<float> = ptradd arr2.0 jj_index.0.3;
  a_ij.0.3: float = load a_ij_ptr.0.2;
  b_ij.0.2: float = load b_ij_ptr.0.2;
  b_jj.0.2: float = load jj_ptr.0.2;
  value.0.4: float = fdiv a_ij.0.3 b_jj.0.2;
  store b_ij_ptr.0.2 value.0.4;
.j.loop_end:
  j.0.3: int = add j.0.2 one.0.0;
  jmp .j.loop;
.j.done:
  ii_index.0.1: int = mul i.0.1 size.0;
  ii_index.0.2: int = add ii_index.0.1 i.0.1;
  a_ii_ptr.0.1: ptr<float> = ptradd arr1.0 ii_index.0.2;
  b_ii_ptr.0.1: ptr<float> = ptradd arr2.0 ii_index.0.2;
  value.0.2: float = load a_ii_ptr.0.1;
  sqrt_value.0.1: float = call @sqrt value.0.2;
  store b_ii_ptr.0.1 sqrt_value.0.1;
.i.loop_end:
  i.0.2: int = add i.0.1 one.0.0;
  jmp .i.loop;
.i.done:
  ret;
}
@main {
.main.b0:
  one.0.0: int = const 1;
  size.0.0: int = const 4;
  sqsize.0.0: int = mul size.0.0 size.0.0;
  arr1.0.0: ptr<float> = call @fillarray;
  arr1_transposed.0.0: ptr<float> = call @fillarray;
  hermitian.0.0: ptr<float> = call @fillarray;
  res.0.0: ptr<float> = call @zeros sqsize.0.0;
  call @transpose size.0.0 arr1.0.0 arr1_transposed.0.0;
  call @matmul size.0.0 arr1.0.0 arr1_transposed.0.0 hermitian.0.0;
  call @cholesky size.0.0 hermitian.0.0 res.0.0;
  call @printarray sqsize.0.0 res.0.0;
  free arr1.0.0;
  free arr1_transposed.0.0;
  free hermitian.0.0;
  free res.0.0;
  ret;
}
